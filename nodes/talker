from pynput.keyboard import Key, Listener

import rospy
import sys, select, os
import tty, termios
from std_msgs.msg import String

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
   q    w
   a    s    d
w/s : linear movement (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : angular movement (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)
stop when key released
ESC to quit
"""

e = """
Communications Failed
"""
# 입력에 필요한 변수, 함수와 그 외의 코드가 구분이 어려워 클래스로 만들어보았습니다.
class Teleop:
    def __init__(self):
        print(msg)
        # 추가된 부분. 현재 입력 중인 키를 집합 형태로 가지고 있습니다.
        self.keys = set()
        self.status = 0

        # getKey 대신 pynput.keyboard.Listener를 사용하여 입력값을 처리합니다.
        with Listener(
            # 콜백함수 지정
            on_press=self.on_press,
            on_release=self.on_release
        ) as listener:
            listener.join()
    # ...
    def move(self):
        global pub
        try:
            # 키를 입력받으면 num에 숫자를 추가하여 이진수로 변환후 listener에 보낸다
            # status는 키가 100번 눌려진것을 체크하여 msg를 다시 보여준다
            keys = ''.join(self.keys)
            num=0
            if 'q' in keys:
                num+=1
                self.status = self.status + 1
            
            if 'w' in keys:
                self.status = self.status + 1
                num+=2

            # if 'e' in keys:
            #     num+=4
            #     self.status = self.status + 1

            if 'a' in keys:
                self.status = self.status + 1
                num+=8
            
            if 's' in keys:
                self.status = self.status + 1
                num+=16
                num+=4

            if 'd' in keys:
                self.status = self.status + 1
                num+=32

            if 'Space' in keys:   
                num+=64
                self.status = self.status + 1

            # else:
            #     if (key =='\x03'):
            #         break0

            if self.status == 100 :
                print(msg)
                self.status = 0
            # 눌린 키들과 키값들을 보여준다
            rospy.loginfo(f'{keys}, {num}')

            # 키값을 이진수로 변환하여 문자열로 보낸다
            pub.publish(str(bin(num)))

        # 연결 오류시 communication Fail과 오류 내용을 출력한다
        except rospy.ROSInterruptException as err:
            print(e)
            print(err)

    # 키가 눌렸을 때 호출되는 콜백 함수
    def on_press(self, key):
        # to remove input buffer
        # nt = '윈도우' posix = '우분투'
        # 터미널에서 키값을 받기위해서 사용
        if os.name == 'nt':
            msvcrt.getch()
        else:
            tty.setraw(sys.stdin.fileno())
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)

        # esc 키를 입력했을 경우 Listener 종료
        if key == Key.esc:
            return False

        # wasd가 아닌, ctrl, alt 등의
        # 특수 키를 입력했을 경우 함수를 조기 종료합니다.
        if not hasattr(key, 'char'):
            return True

        # wasd가 아닐 때에도 조기 종료합니다.
        key = key.char
        if key not in 'qwasd':
            return True

        # 상반되는 두 키가 함께 눌렸을 경우,
        # 먼저 눌린 키를 제거합니다.
        if key == 'w' and 's' in self.keys:
            self.keys.remove('s')
        if key == 'a' and 'd' in self.keys:
            self.keys.remove('d')
        if key == 's' and 'w' in self.keys:
            self.keys.remove('w')
        if key == 'd' and 'a' in self.keys:
            self.keys.remove('a')

        self.keys.add(key)
        self.move()

    # 키에서 손을 뗐을 때 호출되는 콜백 함수
    def on_release(self, key):
        # 입력 값이 특수 키인지 확인
        # wasd만 처리하기 때문에 특수 키일 경우 조기 종료합니다.
        if not hasattr(key, 'char'):
            return True # False면 Listener 종료

        # 키 코드 값을 가져옵니다.
        key = key.char
        # 중복제거
        # 해당 키 코드 값이 집합에 있으면 제거합니다.
        if key in self.keys:
            self.keys.remove(key)
            self.move()

if __name__=="__main__":
    # 리눅스 터미널 세팅
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)
    
    # ros setup
    rospy.init_node('talker')


    pub=rospy.Publisher('chatter', String, queue_size=10)

    # 클래스 호출
    Teleop()
    num = 0
    
    pub.publish(str(bin(num)))

    # 표준 입력 버퍼 정리
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)